{"version":3,"sources":["huffman/Node.js","huffman/huffmanEncode.ts","components/Canvas.tsx","components/AlgorithmDescription.tsx","components/OtherLinks.tsx","components/HuffmanPanel.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TOP_PADDING","window","innerHeight","LEFT_PADDING","innerWidth","SQUARE_HEIGHT","SQUARE_WIDTH","Node","symbol","probability","col","row","parent","this","encoding","ctx","strokeStyle","font","fillText","getX","getY","beginPath","moveTo","lineTo","stroke","canvas","_canvas","getContext","SquareNode","fillStyle","fillRect","textAlign","textBaseline","setLineDash","CircleNode","arc","Math","PI","fill","genNewLevel","nodes","num","newLevel","minNode1","length","minNode2","i","push","round","sort","a","b","j","constructor","name","temp","circleAboveSquares","dfTraversal","root","console","log","huffmanEncode","levels","draw","undefined","drawLink","Canvas","props","canvasRef","useRef","useEffect","current","style","width","height","getBoundingClientRect","clearRect","tracePath","writeSymbol","id","ref","backgroundColor","AlgorithmDescription","Card","className","Header","Body","Title","fontSize","Text","Button","variant","onClick","open","OtherLinks","marginTop","Link","href","HuffmanPanel","useState","nodesList","setNodesList","inputs","encodings","setEncodings","selectedEncoding","setSelectedEncoding","forEach","node","index","Container","fluid","Row","Col","xs","filter","map","_","InputGroup","Prepend","onMouseOver","color","FormControl","onChange","e","parseFloat","target","value","size","block","preventDefault","x","alert","abs","reduce","newNodes","handleSubmit","App","Helmet","charSet","content","minHeight","display","alignItems","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a13cc652.chunk.js","sourcesContent":["const TOP_PADDING = window.innerHeight / 20;\nconst LEFT_PADDING = window.innerWidth / 25;\nconst SQUARE_HEIGHT = window.innerHeight / 25;\nconst SQUARE_WIDTH = window.innerHeight / 25;\n\nclass Node {\n  constructor(symbol, probability, col, row, parent) {\n    this.symbol = symbol;\n    this.probability = probability;\n    this.col = col;\n    this.row = row;\n    this.parent = parent;\n    this.encoding = \"\";\n  }\n  get getX() {\n    return LEFT_PADDING + this.col * SQUARE_WIDTH * 4;\n  }\n  get getY() {\n    return TOP_PADDING + this.row * SQUARE_HEIGHT * 2;\n  }\n  set canvas(canvas) {\n    this._canvas = canvas;\n    this.ctx = this._canvas.getContext(\"2d\");\n  }\n  writeSymbol() {\n    this.ctx.strokeStyle = \"white\";\n    this.ctx.font = \"18px Arial\";\n    this.ctx.fillText(`S${this.symbol}`, this.getX - SQUARE_HEIGHT / 2, this.getY + SQUARE_HEIGHT / 2);\n  }\n  tracePath(parent) {\n    this.ctx.strokeStyle = \"red\";\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.getX, this.getY + SQUARE_HEIGHT / 2);\n    this.ctx.lineTo(this.parent[parent].getX + SQUARE_WIDTH, this.parent[parent].getY + SQUARE_HEIGHT / 2);\n    this.ctx.stroke();\n  }\n}\n\nclass SquareNode extends Node {\n  draw() {\n    this.ctx.fillStyle = \"#375a7f\";\n    this.ctx.fillRect(this.getX, this.getY, SQUARE_WIDTH, SQUARE_HEIGHT);\n\n    this.ctx.fillStyle = \"white\";\n    this.ctx.font = \"18px Arial\";\n    this.ctx.textAlign = \"center\";\n    this.ctx.textBaseline = \"middle\";\n    this.ctx.fillText(`${this.probability}`,\n      this.getX + SQUARE_WIDTH / 2,\n      this.getY + SQUARE_HEIGHT / 2);\n  }\n  drawLink() {\n    this.ctx.strokeStyle = \"white\";\n    this.ctx.setLineDash([5, 3]);\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.getX, this.getY + SQUARE_HEIGHT / 2);\n    this.ctx.lineTo(this.parent[0].getX + SQUARE_WIDTH, this.parent[0].getY + SQUARE_HEIGHT / 2);\n    this.ctx.stroke();\n    this.ctx.setLineDash([0]);\n  }\n}\n\nclass CircleNode extends Node {\n  draw() {\n    this.ctx.beginPath();\n    this.ctx.arc(this.getX + SQUARE_WIDTH / 2, this.getY + SQUARE_HEIGHT / 2, SQUARE_WIDTH / 2, 0, 2 * Math.PI);\n    this.ctx.fillStyle = \"#375a7f\";\n    this.ctx.fill();\n\n    this.ctx.fillStyle = \"white\";\n    this.ctx.font = \"18px Arial\";\n    this.ctx.textAlign = \"center\";\n    this.ctx.textBaseline = \"middle\";\n    this.ctx.fillText(`${this.probability}`,\n      this.getX + SQUARE_WIDTH / 2,\n      this.getY + SQUARE_HEIGHT / 2);\n  }\n  drawLink() {\n    this.ctx.strokeStyle = \"white\";\n\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.getX, this.getY + SQUARE_HEIGHT / 2);\n    this.ctx.lineTo(this.parent[0].getX + SQUARE_WIDTH, this.parent[0].getY + SQUARE_HEIGHT / 2);\n    this.ctx.stroke();\n\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.getX, this.getY + SQUARE_HEIGHT / 2);\n    this.ctx.lineTo(this.parent[1].getX + SQUARE_WIDTH, this.parent[1].getY + SQUARE_HEIGHT / 2);\n    this.ctx.stroke();\n\n    this.ctx.font = \"18px Arial\";\n    this.ctx.fillText(0, this.getX - 5, this.getY + SQUARE_HEIGHT * 0.3);\n    this.ctx.fillText(1, this.getX - 5, this.getY + SQUARE_HEIGHT);\n  }\n}\n\nexport default Node;\nexport { SquareNode, CircleNode };","import Node, { SquareNode, CircleNode } from \"./Node\";\n\n// Huffman Encoding Algorithm\nfunction huffmanEncode(nodes: Array<SquareNode | CircleNode>, canvas: any) {\n    console.log(canvas);\n\n    // First takes a sorted list of nodes by probability.\n\n    // Each level (column) of the Huffman tree.\n    // The first level is all the nodes.\n    // The last level would be the root node only.\n    let levels = [nodes];\n\n    // newLevel holds the new levels\n    let newLevel = nodes;\n\n    // Progressively generate new levels (Huffman levels)\n    // until we get a level with only a single node.\n\n    for (let col = 0; newLevel.length > 1; col++) {\n        for (let row = 0; row < newLevel.length; row++) {\n            newLevel[row].row = row;\n            newLevel[row].col = col;\n            newLevel[row].canvas = canvas;\n            newLevel[row].draw();\n            if (newLevel[row].parent !== undefined) {\n                newLevel[row].drawLink();\n            }\n        }\n        newLevel = genNewLevel(newLevel);\n        levels.push(newLevel);\n    }\n\n    // Draw the root node\n    newLevel[0].row = 0;\n    newLevel[0].col = levels.length - 1;\n    newLevel[0].canvas = canvas;\n    newLevel[0].draw();\n    newLevel[0].drawLink();\n\n    // Perform a depth first travel from root node to leaf nodes.\n    // Progressively build up the encoding and store them in leaf nodes.\n    let root = levels[levels.length - 1][0];\n    dfTraversal(root, \"\");\n\n    return root;\n}\n\n// For nodes of equal probability, store the circle node\n// above the square node if necessary.\nfunction circleAboveSquares(nodes: Array<SquareNode | CircleNode>) {\n    for (let i = 0; i < nodes.length; i++) {\n        for (let j = 0; j < nodes.length - 1; j++) {\n            if (nodes[j].probability == nodes[j + 1].probability\n                && nodes[j + 1].constructor.name == \"CircleNode\") {\n                let temp = nodes[j];\n                nodes[j] = nodes[j + 1];\n                nodes[j + 1] = temp;\n            }\n        }\n    }\n\n    return nodes;\n}\n\nfunction genNewLevel(nodes: Array<SquareNode | CircleNode>) {\n    let newLevel = []\n\n    // Get the two smallest nodes by probability.\n    let minNode1 = nodes[nodes.length - 1];\n    let minNode2 = nodes[nodes.length - 2];\n\n    // Copy all the nodes from the previous level\n    // excluding the two min nodes.\n    for (let i = 0; i < nodes.length - 2; i++) {\n        newLevel.push(new SquareNode(nodes[i].symbol,\n            nodes[i].probability, i, i, [nodes[i]]));\n    }\n\n    // Create a circle node which is the combination of the two min nodes.\n    newLevel.push(new CircleNode(minNode1.symbol + minNode2.symbol,\n        round(minNode1.probability + minNode2.probability),\n        newLevel.length, newLevel.length, [minNode2, minNode1]));\n\n    // Sort the new level, then place circle node above square nodes.\n    newLevel.sort((a, b) => a.probability <= b.probability ? 1 : -1);\n    newLevel = circleAboveSquares(newLevel);\n\n    return newLevel;\n}\n\n// Recursive depth first traversal.\n// We want to trace all paths from root node to leaf nodes.\n// We start with an empty encoding string\n// and build it up by appending 1 or 0 \n// when recursing on any circle node.\nfunction dfTraversal(root: SquareNode | CircleNode, encoding: string) {\n    console.log(root);\n    if (!root) {\n        return;\n    } else if (!root.parent) {\n        root.encoding = encoding;\n    } else if (root.constructor.name === \"SquareNode\") {\n        dfTraversal(root.parent[0], encoding);\n    } else {\n        dfTraversal(root.parent[0], encoding + \"0\");\n        dfTraversal(root.parent[1], encoding + \"1\");\n    }\n}\n\nfunction tracePath(root: SquareNode | CircleNode, encoding: string) {\n    let i = 0;\n    while (root.parent) {\n        if (root.parent.length === 2) {\n            root.tracePath(encoding[i]);\n            root = root.parent[encoding[i]];\n            i++;\n        } else {\n            root.tracePath(0);\n            root = root.parent[0];\n        }\n    }\n}\n\nfunction untracePath(root: SquareNode | CircleNode | null) {\n    if (!root) {\n        return;\n    } else {\n        if (root.parent) {\n            root.drawLink();\n            untracePath(root.parent[0]);\n            untracePath(root.parent[1]);\n        }\n    }\n}\n\nfunction round(num: number) {\n    return Math.round(num * 100) / 100;\n}\n\nexport default huffmanEncode;\nexport { tracePath, untracePath };","import React, { useEffect, useRef } from \"react\";\n\nimport { SquareNode } from \"../huffman/Node\";\nimport huffmanEncode, { tracePath } from \"../huffman/huffmanEncode\";\n\nfunction Canvas(props: { nodes: Array<SquareNode>, encoding: string }) {\n  const canvasRef = useRef(null);\n  const { nodes, encoding } = props;\n\n  useEffect(() => {\n    if (canvasRef?.current) {\n      // @ts-ignore\n      canvasRef.current.style.width = '100%';\n      // @ts-ignore\n      canvasRef.current.style.height = '100%';\n      // @ts-ignore\n      canvasRef.current.width = canvasRef.current.getBoundingClientRect().width;\n      // @ts-ignore\n      canvasRef.current.height = canvasRef.current.getBoundingClientRect().height;\n    }\n  }, []);\n\n  useEffect(() => {\n    if (canvasRef?.current) {\n      for (const node of nodes)\n        node.canvas = canvasRef.current;\n\n      // @ts-ignore\n      canvasRef.current.getContext('2d').clearRect(0, 0, 10000, 10000);\n\n      if (nodes.length) {\n        const root = huffmanEncode(nodes, canvasRef.current);\n        if (encoding) tracePath(root, encoding);\n\n        for (const node of nodes)\n          node.writeSymbol();\n      }\n    }\n  }, [canvasRef, nodes, encoding]);\n\n  return (\n    <canvas id=\"canvas\" ref={canvasRef} style={{ backgroundColor: \"black\" }} />\n  );\n}\n\nexport default Canvas;","import React from \"react\";\nimport { Card, Button } from \"react-bootstrap\";\n\nfunction AlgorithmDescription() {\n  return (\n    <Card\n      className=\"text-center\"\n    >\n      <Card.Header>Algorithm Description</Card.Header>\n      <Card.Body>\n        <Card.Title style={{ fontSize: \"1.75rem\" }}>Huffman Encoding</Card.Title>\n        <Card.Text style={{ fontSize: \"1.1rem\" }}>\n          <p>The Huffman Encoding algorithm is an encoding algorithm for lossless data compression.</p>\n          <p>It is a variable length code where symbols of higher probability and given shorter lengths.</p>\n        </Card.Text>\n        <Button variant=\"primary\" onClick={() => window.open(\"https://en.wikipedia.org/wiki/Huffman_coding\")}>\n          Read More\n      </Button>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default AlgorithmDescription;","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nfunction OtherLinks() {\n  return (\n    <Card\n      className=\"text-center\"\n      style={{ marginTop: \"2rem\" }}\n    >\n      <Card.Header>Useful Links</Card.Header>\n      <Card.Body>\n        <Card.Title style={{ fontSize: \"1.75rem\" }}>\n          Checkout My Other Works\n      </Card.Title>\n        <Card.Link href=\"https://github.com/V-Wong/Huffman-Encoding\">Source Code</Card.Link>\n        <Card.Link href=\"https://vwong.dev/\">My Portfolio</Card.Link>\n        <Card.Link href=\"https://github.com/V-Wong\">My GitHub</Card.Link>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default OtherLinks;","import React, { useEffect, useState } from \"react\";\nimport { Container, Row, Col, InputGroup, Button, FormControl, Card } from \"react-bootstrap\";\n\nimport Canvas from \"./Canvas\";\nimport AlgorithmDescription from \"./AlgorithmDescription\";\nimport OtherLinks from \"./OtherLinks\";\nimport { SquareNode } from \"../huffman/Node\";\n\nfunction HuffmanPanel() {\n  const [nodesList, setNodesList] = useState<Array<SquareNode>>([] as Array<SquareNode>);\n  const [inputs, _] = useState([0, 0, 0, 0, 0, 0, 0, 0]);\n  const [encodings, setEncodings] = useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n  const [selectedEncoding, setSelectedEncoding] = useState(\"\");\n\n  function handleSubmit() {\n    if (inputs.filter(x => x !== 0).length < 2) {\n      window.alert(\"Please input at least 2 symbols\");\n      return;\n    } else if (Math.abs(inputs.reduce((a, b) => a + b) - 1) >= 0.00001) {\n      window.alert(\"Please ensure probabilities sum to 1\");\n      return;\n    }\n\n    const newNodes = inputs.map((e, i) => new SquareNode(i, e, 0, 0));\n    setNodesList(newNodes);\n  };\n\n  useEffect(() => {\n    nodesList.forEach((node, index) => node.probability !== 0 \n                                       ? encodings[index] = node.encoding : null);\n    setEncodings([...encodings]);\n  }, [nodesList]);\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col xs={10}>\n          <Canvas nodes={nodesList.filter(node => node.probability !== 0)} encoding={selectedEncoding} />\n        </Col>\n\n        <Col xs={2}>\n          <AlgorithmDescription/>\n\n          <Card\n            className=\"text-center\"\n            style={{ marginTop: \"2rem\" }}\n          >\n            <Card.Header>Probability Input Panel</Card.Header>\n            <Card.Body>\n              <Card.Title style={{ fontSize: \"1.75rem\" }}>\n                Enter Symbol Probabilities\n              </Card.Title>\n              {\n                inputs.map((_, i) => (\n                  <InputGroup>\n                    <InputGroup.Prepend\n                      onMouseOver={() => setSelectedEncoding(encodings[i])}\n                    >\n                      <InputGroup.Text\n                        style={{\n                          width: \"8rem\",\n                          color: selectedEncoding && selectedEncoding === encodings[i]\n                            ? \"red\" : \"white\"\n                        }}\n                      >\n                        Encoding: {encodings[i]}\n                      </InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      onChange={e => inputs[i] = parseFloat(e.target.value)}\n                    />\n                  </InputGroup>\n                ))\n              }\n\n              <div className=\"buttons-container\">\n                <Button\n                  variant=\"success\"\n                  size=\"lg\"\n                  block\n                  style={{ marginTop: \"1vh\" }}\n                  onClick={e => { e.preventDefault(); handleSubmit() }}\n                >\n                  Submit\n                </Button>\n                <Button\n                  variant=\"danger\"\n                  size=\"lg\"\n                  block\n                  style={{ marginTop: \"1vh\" }}\n                >\n                  Clear\n                </Button>\n              </div>\n            </Card.Body>\n          </Card>\n\n          <OtherLinks/>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default HuffmanPanel;","import React from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { Container } from \"react-bootstrap\";\n\nimport HuffmanPanel from \"./components/HuffmanPanel\";\n\nimport \"bootswatch/dist/darkly/bootstrap.min.css\";\n\nfunction App() {\n  return (\n    <>\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Huffman Encoding</title>\n        <meta name=\"description\" content=\"Huffman Encoding tool for visualising the binary tree formed.\" />\n        <meta name=\"author\" content=\"Vincent Wong\" />\n        <meta name=\"keywords\" content=\"Canvas, Huffman Encoding algorithm\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      </Helmet>\n\n      <div style={{ minHeight: \"100vh\", display: \"flex\", alignItems: \"center\" }}>\n        <Container fluid>\n          <HuffmanPanel />\n        </Container>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}