{"version":3,"sources":["huffman/Node.ts","huffman/HuffmanEncoder.ts","components/Canvas.tsx","components/AlgorithmDescription.tsx","components/OtherLinks.tsx","components/HuffmanPanel.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TOP_PADDING","window","innerHeight","LEFT_PADDING","innerWidth","SQUARE_HEIGHT","SQUARE_WIDTH","AbstractNode","symbol","probability","col","row","parents","encoding","type","this","length","ctx","strokeStyle","font","fillText","getX","getY","parentIndex","beginPath","moveTo","lineTo","stroke","SquareNode","fillStyle","fillRect","textAlign","textBaseline","setLineDash","CircleNode","arc","Math","PI","fill","i","round","num","HuffmanEncoder","root","nodes","sort","a","b","writeSymbol","levels","newLevel","draw","hasParent","drawLink","genNewLevel","push","dfTraversal","j","temp","minNode1","minNode2","node1","node2","newSymbol","newProbability","combineNodes","circleAboveSquares","tracePath","Number","untracePath","Canvas","props","canvasRef","useRef","useEffect","current","style","width","height","getBoundingClientRect","getContext","clearRect","encoder","run","Card","className","Header","Body","id","ref","AlgorithmDescription","Title","Text","Button","variant","onClick","open","OtherLinks","marginTop","Link","href","HuffmanPanel","useState","nodesList","setNodesList","inputs","encodings","setEncodings","selectedEncoding","setSelectedEncoding","forEach","node","index","Container","fluid","Row","Col","xs","filter","map","_","InputGroup","Prepend","onMouseOver","color","FormControl","onChange","e","target","value","parseFloat","size","block","x","alert","abs","reduce","newNodes","App","Helmet","charSet","name","content","minHeight","display","alignItems","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67be6fe1.chunk.js","sourcesContent":["const TOP_PADDING = window.innerHeight / 20;\nconst LEFT_PADDING = window.innerWidth / 25;\nconst SQUARE_HEIGHT = window.innerHeight / 25;\nconst SQUARE_WIDTH = window.innerHeight / 25;\n\nclass AbstractNode {\n  symbol: number;\n  probability: number;\n  col: number;\n  row: number;\n  parents: Array<AbstractNode>;\n  encoding: string;\n  type: string;\n\n  constructor(symbol: number, probability: number, col: number, row: number, parents: Array<AbstractNode>=[]) {\n    this.symbol = symbol;\n    this.probability = probability;\n    this.col = col;\n    this.row = row;\n    this.parents = parents;\n    this.encoding = \"\";\n    this.type = \"\";\n  }\n\n  get getX() {\n    return LEFT_PADDING + this.col * LEFT_PADDING * 2;\n  }\n\n  get getY() {\n    return TOP_PADDING + this.row * SQUARE_HEIGHT * 2;\n  }\n\n  hasParent() {\n    return this.parents.length !== 0;\n  }\n\n  writeSymbol(ctx: any) {\n    ctx.strokeStyle = \"white\";\n    ctx.font = \"18px Arial\";\n    ctx.fillText(`S${this.symbol}`, this.getX - SQUARE_HEIGHT / 2, this.getY + SQUARE_HEIGHT / 2);\n  }\n\n  tracePath(ctx: any, parentIndex: number) {\n    ctx.strokeStyle = \"red\";\n    ctx.beginPath();\n    ctx.moveTo(this.getX, this.getY + SQUARE_HEIGHT / 2);\n    ctx.lineTo(this.parents[parentIndex].getX + SQUARE_WIDTH, this.parents[parentIndex].getY + SQUARE_HEIGHT / 2);\n    ctx.stroke();\n  }\n\n  draw(ctx: any) {\n\n  }\n\n  drawLink(ctx: any) {\n\n  }\n}\n\nclass SquareNode extends AbstractNode {\n  constructor(symbol: number, probability: number, col: number, row: number, parents: Array<AbstractNode>=[]) {\n    super(symbol, probability, col, row, parents);\n    this.type = \"SquareNode\";\n  }\n\n  draw(ctx: any) {\n    ctx.fillStyle = \"#375a7f\";\n    ctx.fillRect(this.getX, this.getY, SQUARE_WIDTH, SQUARE_HEIGHT);\n\n    ctx.fillStyle = \"white\";\n    ctx.font = \"18px Arial\";\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.fillText(`${this.probability}`,\n      this.getX + SQUARE_WIDTH / 2,\n      this.getY + SQUARE_HEIGHT / 2);\n  }\n\n  drawLink(ctx: any) {\n    ctx.strokeStyle = \"white\";\n    ctx.setLineDash([5, 3]);\n    ctx.beginPath();\n    ctx.moveTo(this.getX, this.getY + SQUARE_HEIGHT / 2);\n    ctx.lineTo(this.parents[0].getX + SQUARE_WIDTH, this.parents[0].getY + SQUARE_HEIGHT / 2);\n    ctx.stroke();\n    ctx.setLineDash([0]);\n  }\n}\n\nclass CircleNode extends AbstractNode {\n  constructor(symbol: number, probability: number, col: number, row: number, parents: Array<AbstractNode>=[]) {\n    super(symbol, probability, col, row, parents);\n    this.type = \"CircleNode\";\n  }\n\n  draw(ctx: any) {\n    ctx.beginPath();\n    ctx.arc(this.getX + SQUARE_WIDTH / 2, this.getY + SQUARE_HEIGHT / 2, SQUARE_WIDTH / 2, 0, 2 * Math.PI);\n    ctx.fillStyle = \"#375a7f\";\n    ctx.fill();\n\n    ctx.fillStyle = \"white\";\n    ctx.font = \"18px Arial\";\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.fillText(`${this.probability}`,\n      this.getX + SQUARE_WIDTH / 2,\n      this.getY + SQUARE_HEIGHT / 2);\n  }\n\n  drawLink(ctx: any) {\n    ctx.strokeStyle = \"white\";\n\n    for (let i = 0; i <= 1; i++) {\n      ctx.beginPath();\n      ctx.moveTo(this.getX, this.getY + SQUARE_HEIGHT / 2);\n      ctx.lineTo(this.parents[i].getX + SQUARE_WIDTH, this.parents[i].getY + SQUARE_HEIGHT / 2);\n      ctx.stroke();\n    }\n\n    ctx.font = \"18px Arial\";\n    ctx.fillText(0, this.getX - 5, this.getY + SQUARE_HEIGHT * 0.3);\n    ctx.fillText(1, this.getX - 5, this.getY + SQUARE_HEIGHT);\n  }\n}\n\nexport default AbstractNode;\nexport { SquareNode, CircleNode };","import AbstractNode, { SquareNode, CircleNode } from \"./Node\";\n\n// Huffman Encoding Algorithm\nclass HuffmanEncoder {\n  ctx: any;\n  root: AbstractNode | null;\n\n  constructor(ctx: any) {\n    this.ctx = ctx;\n    this.root = null;\n  }\n\n  run(nodes: Array<AbstractNode>) {\n    nodes.sort((a, b) => a.probability <= b.probability ? 1 : -1);\n\n    for (const node of nodes)\n      node.writeSymbol(this.ctx);\n\n    const levels = [nodes];\n    let newLevel = nodes;\n\n    for (let col = 0; newLevel.length > 1; col++) {\n      for (let row = 0; row < newLevel.length; row++) {\n        newLevel[row].row = row;\n        newLevel[row].col = col;\n        newLevel[row].draw(this.ctx);\n        if (newLevel[row].hasParent()) {\n          newLevel[row].drawLink(this.ctx);\n        }\n      }\n      newLevel = this.genNewLevel(newLevel);\n      levels.push(newLevel);\n    }\n\n    newLevel[0].row = 0;\n    newLevel[0].col = levels.length - 1;\n    newLevel[0].draw(this.ctx);\n    newLevel[0].drawLink(this.ctx);\n\n    this.root = levels[levels.length - 1][0];\n    this.dfTraversal(this.root, \"\");\n  }\n\n  circleAboveSquares(nodes: Array<AbstractNode>) {\n    for (let i = 0; i < nodes.length; i++) {\n      for (let j = 0; j < nodes.length - 1; j++) {\n        if (nodes[j].probability === nodes[j + 1].probability\n            && nodes[j + 1].type === \"CircleNode\") {\n          const temp = nodes[j];\n          nodes[j] = nodes[j + 1];\n          nodes[j + 1] = temp;\n        }\n      }\n    }\n\n    return nodes;\n  }\n\n  genNewLevel(nodes: Array<AbstractNode>) {\n    const combineNodes = (node1: AbstractNode, node2: AbstractNode,\n                          col: number = newLevel.length, row: number = newLevel.length) => {\n      const newSymbol = node1.symbol + node2.symbol;\n      const newProbability = round(node1.probability + node2.probability);\n\n      return new CircleNode(newSymbol, newProbability, col, row, [node1, node2]);\n    }\n\n    const newLevel = [];\n\n    const minNode1 = nodes[nodes.length - 1];\n    const minNode2 = nodes[nodes.length - 2];\n\n    for (let i = 0; i < nodes.length - 2; i++) {\n      newLevel.push(new SquareNode(nodes[i].symbol, nodes[i].probability,\n                                   i, i, [nodes[i]]));\n    }\n\n    newLevel.push(combineNodes(minNode1, minNode2));\n    newLevel.sort((a, b) => a.probability <= b.probability ? 1 : -1);\n\n    return this.circleAboveSquares(newLevel);\n  }\n\n  dfTraversal(root: AbstractNode, encoding: string) {\n    if (root == null || !root || !root.hasParent()) {\n      root.encoding = encoding;\n    } else if (root.type === \"SquareNode\") {\n      this.dfTraversal(root.parents[0], encoding);\n    } else {\n      this.dfTraversal(root.parents[0], encoding + \"0\");\n      this.dfTraversal(root.parents[1], encoding + \"1\");\n    }\n  }\n\n  tracePath(encoding: string) {\n    if (!this.root) return;\n\n    let i = 0, root = this.root;\n    while (root.hasParent()) {\n      if (root.parents.length === 2) {\n        root.tracePath(this.ctx, Number(encoding[i]));\n        root = root.parents[Number(encoding[i])];\n        i++;\n      } else {\n        root.tracePath(this.ctx, 0);\n        root = root.parents[0];\n      }\n    }\n  }\n\n  untracePath(root: AbstractNode | null) {\n    if (!root) {\n      return;\n    } else {\n      if (root.hasParent()) {\n        root.drawLink(this.ctx);\n        this.untracePath(root.parents[0]);\n        this.untracePath(root.parents[1]);\n      }\n    }\n  }\n}\n\nfunction round(num: number) {\n  return Math.round(num * 100) / 100;\n}\n\nexport default HuffmanEncoder;","import React, { useEffect, useRef } from \"react\";\nimport {Card} from \"react-bootstrap\";\n\nimport AbstractNode from \"../huffman/Node\";\nimport HuffmanEncoder from \"../huffman/HuffmanEncoder\";\n\nfunction Canvas(props: { nodes: Array<AbstractNode>, encoding: string }) {\n  const canvasRef = useRef(null);\n  const { nodes, encoding } = props;\n\n  useEffect(() => {\n    if (canvasRef?.current) {\n      // @ts-ignore\n      canvasRef.current.style.width = '100%';\n      // @ts-ignore\n      canvasRef.current.style.height = 'max(100%, 80vh)';\n      // @ts-ignore\n      canvasRef.current.width = canvasRef.current.getBoundingClientRect().width;\n      // @ts-ignore\n      canvasRef.current.height = canvasRef.current.getBoundingClientRect().height;\n    }\n  }, []);\n\n  useEffect(() => {\n    if (canvasRef?.current) {\n      // @ts-ignore\n      canvasRef.current.getContext('2d').clearRect(0, 0, 10000, 10000);\n\n      // @ts-ignore\n      const encoder = new HuffmanEncoder(canvasRef.current.getContext('2d'));\n      \n      if (nodes.length) {\n        encoder.run(nodes);\n        if (encoding) encoder.tracePath(encoding);\n      }\n    }\n  }, [canvasRef, nodes, encoding]);\n\n  return (\n    <Card \n      className=\"text-center\" \n      style={{height: \"100%\"}}\n    >\n      <Card.Header>Rendered Huffman Tree</Card.Header>\n      <Card.Body>\n        <canvas id=\"canvas\" ref={canvasRef} />\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default Canvas;","import React from \"react\";\nimport { Card, Button } from \"react-bootstrap\";\n\nfunction AlgorithmDescription() {\n  return (\n    <Card\n      className=\"text-center\"\n    >\n      <Card.Header>Algorithm Description</Card.Header>\n      <Card.Body>\n        <Card.Title>Huffman Encoding</Card.Title>\n        <Card.Text>\n          <p>The Huffman Encoding algorithm is an encoding algorithm for lossless data compression.\n          It is a variable length code where symbols of higher probability are given shorter lengths.</p>\n        </Card.Text>\n        <Button variant=\"primary\" onClick={() => window.open(\"https://en.wikipedia.org/wiki/Huffman_coding\")}>\n          Read More\n      </Button>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default AlgorithmDescription;","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nfunction OtherLinks() {\n  return (\n    <Card\n      className=\"text-center\"\n      style={{ marginTop: \"1rem\" }}\n    >\n      <Card.Header>Useful Links</Card.Header>\n      <Card.Body>\n        <Card.Title>\n          Checkout My Other Works\n      </Card.Title>\n        <Card.Link href=\"https://github.com/V-Wong/Huffman-Encoding\">Source Code</Card.Link>\n        <Card.Link href=\"https://vwong.dev/\">My Portfolio</Card.Link>\n        <Card.Link href=\"https://github.com/V-Wong\">My GitHub</Card.Link>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default OtherLinks;","import React, { useEffect, useState } from \"react\";\nimport { Container, Row, Col, InputGroup, Button, FormControl, Card } from \"react-bootstrap\";\n\nimport Canvas from \"./Canvas\";\nimport AlgorithmDescription from \"./AlgorithmDescription\";\nimport OtherLinks from \"./OtherLinks\";\nimport AbstractNode, { SquareNode } from \"../huffman/Node\";\n\nfunction HuffmanPanel() {\n  const [nodesList, setNodesList] = useState<Array<AbstractNode>>([] as Array<AbstractNode>);\n  const [inputs, _] = useState([0, 0, 0, 0, 0, 0, 0, 0]);\n  const [encodings, setEncodings] = useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n  const [selectedEncoding, setSelectedEncoding] = useState(\"\");\n\n  function handleSubmit() {\n    if (inputs.filter(x => x !== 0).length < 2) {\n      window.alert(\"Please input at least 2 symbols\");\n      return;\n    } else if (Math.abs(inputs.reduce((a, b) => a + b) - 1) >= 0.00001) {\n      window.alert(\"Please ensure probabilities sum to 1\");\n      return;\n    }\n\n    const newNodes = inputs.map((e, i) => new SquareNode(i, e, 0, 0));\n    setNodesList(newNodes);\n  };\n\n  useEffect(() => {\n    nodesList.forEach((node, index) => node.probability !== 0\n                      ? encodings[index] = node.encoding : encodings[index] = \"\");\n    setEncodings([...encodings]);\n  }, [nodesList]);\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col xs={9}>\n          <Canvas nodes={nodesList.filter(node => node.probability !== 0)} encoding={selectedEncoding} />\n        </Col>\n\n        <Col xs={3}>\n          <AlgorithmDescription />\n\n          <Card\n            className=\"text-center\"\n            style={{ marginTop: \"1rem\" }}\n          >\n            <Card.Header >\n              Probability Input Panel\n            </Card.Header> \n            <Card.Body>\n              <Card.Title>\n                Enter Symbol Probabilities\n              </Card.Title>\n              {\n                inputs.map((_, i) => (\n                  <InputGroup>\n                    <InputGroup.Prepend\n                      onMouseOver={() => setSelectedEncoding(encodings[i])}\n                    >\n                      <InputGroup.Text\n                        style={{\n                          width: \"10rem\",\n                          color: selectedEncoding && selectedEncoding === encodings[i]\n                            ? \"red\" : \"white\"\n                        }}\n                      >\n                        Encoding: {encodings[i]}\n                      </InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      onChange={e => !e.target.value ? inputs[i] = 0 : inputs[i] = parseFloat(e.target.value)}\n                    />\n                  </InputGroup>\n                ))\n              }\n\n              <div className=\"buttons-container\">\n                <Button\n                  variant=\"success\"\n                  size=\"lg\"\n                  block\n                  style={{ marginTop: \"1vh\" }}\n                  onClick={handleSubmit}\n                >\n                  Submit\n                </Button>\n                <Button\n                  variant=\"danger\"\n                  size=\"lg\"\n                  block\n                  style={{ marginTop: \"1vh\" }}\n                >\n                  Clear\n                </Button>\n              </div>\n            </Card.Body>\n          </Card>\n\n          <OtherLinks />\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default HuffmanPanel;","import React from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { Container } from \"react-bootstrap\";\n\nimport HuffmanPanel from \"./components/HuffmanPanel\";\n\nimport \"bootswatch/dist/darkly/bootstrap.min.css\";\n\nfunction App() {\n  return (\n    <>\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Huffman Encoding</title>\n        <meta name=\"description\" content=\"Huffman Encoding tool for visualising the binary tree formed.\" />\n        <meta name=\"author\" content=\"Vincent Wong\" />\n        <meta name=\"keywords\" content=\"Canvas, Huffman Encoding algorithm\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      </Helmet>\n\n      <div style={{ minHeight: \"100vh\", display: \"flex\", alignItems: \"center\" }}>\n        <Container fluid>\n          <HuffmanPanel />\n        </Container>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}